import { createSignal, createMemo, untrack } from 'solid-js';

function hot$1(Comp, hot) {
  if (hot) {
    const [comp, setComp] = createSignal(Comp);
    const prev = hot.data;
    if (prev && prev.setComp) {
      prev.setComp(Comp);
    }
    hot.dispose(data => (data.setComp = prev ? prev.setComp : setComp));
    hot.accept();
    let c;
    return props => createMemo(() => (c = comp()) && untrack(() => c(props)));
  }
  return Comp;
}

function hot(Comp, isHot) {
  let _$Component = Comp;
  function _$handler(newModule) {
    newModule.$HotComponent.setComp = Comp.setComp;
    Comp.setComp(newModule.$HotComponent);
  }
  if (isHot) {
    const [comp, setComp] = createSignal(Comp);
    Comp.setComp = setComp;
    let c;
    _$Component = props => createMemo(() => (c = comp()) && untrack(() => c(props)));
  }
  return { _$Component, _$handler };
}

export { hot as esm, hot$1 as standard };
